            //**groupe 4**//

#include <stdio.h>
#include <stdlib.h> // pour poouvoir faire des allocations dynamiques (malloc)

#define N 10

/*Fonction afficher*/
/*affiche les elements d'un tableau*/
void afficher(int *T,int n){
    int k;
    printf("[");
    for(k=0; k<n; k++)
		printf(" %i ", T[k]);
    printf("]\n");
}

/*Fonction Appartient*/
/*Détermine si x appartient au tableau T1*/
int appartient_gr_04(int x, int *T1, int s1, int n1) {
    int inf=0, sup=n1-1, m;
    if((x>T1[sup]) || (x<T1[inf])) return 0; // pour tester si x est dans l'intervalle et donc pour ameliorer la complexité dans ce cas
    else {
        while(inf<=sup) {
            m=(sup+inf)/2;
            if(x<T1[m])
                sup=m-1;
            else if(x>T1[m])
                inf=m+1;
            else
                return 1;
        }
        return 0;
    }
}

/*Fonction Inclus*/
/*Détermine si T1 est inclus dans T2 ou inversement*/

int inclus_gr_04(int *T1, int s1, int n1, int *T2, int s2, int n2) {
	int inf, sup, pos,tmpIndice=0, m, nbElementTrouve=0, x=0;
	if(n2> n1) {
    while ((x<n1) && (x==nbElementTrouve))  {// on sort de la boucle si un élément n'est pas trouvé
      inf=tmpIndice, sup=n2-1, pos=-1;
      while((inf<=sup) && pos==-1) {
        m=(sup+inf)/2;
        if(T1[x]<T2[m])
          sup=m-1;
        else if(T1[x]>T2[m])
          inf=m+1;
        else {
          pos=m;
          nbElementTrouve++;
          tmpIndice=m+1; // pour commencer la recherche d'element suivant à partir de la position suivante de l'elemnt trouvé pour optimiser la recherche
        }
      }
      x++;
    }
    if(nbElementTrouve < n1) return 0;
    if(nbElementTrouve == n1) return 1;
  }
  else if(n2<n1) {
    while ((x<n2) && (x==nbElementTrouve)) {// on sort de la boucle si un élément n'est pas trouvé
      inf=tmpIndice, sup=n1-1, pos=-1;
      while((inf<=sup) && pos==-1) {
        m=(sup+inf)/2;
        if(T2[x]<T1[m])
          sup=m-1;
        else if(T2[x]>T1[m])
          inf=m+1;
        else {
          pos=m;
          nbElementTrouve++;
          tmpIndice=m+1; // pour commencer la recherche d'element suivant à partir de la position suivante de l'elemnt trouvé pour optimiser la recherche
        }
      }
      x++;
    }
    if(nbElementTrouve < n2) return 0;
    if(nbElementTrouve == n2) return 1;
  }

  else {
    int x=0;
    while (x<n1 && T1[x]==T2[x])  x++;
    if( x < n1) return 0;
    if( x == n1) return 1;
  }
}

/*Fonction Inter*/
/*Calcul dans un tableau T3 la fonction mathématique intersection entre T1 et T2*/
void inter_gr_04(int *T1, int s1, int n1, int *T2, int s2, int n2, int *T3, int s3, int n3) {
  int k=0, i=0, tmpIndice=0;
  if(n1 >= n2) {
    int inf=tmpIndice, sup=n1-1, pos=-1, m, x;
    for (x=0; x <= n2-1; x++) {
      inf=0, sup=n1-1, pos=-1;
      while((inf<=sup) && pos==-1) {
        m=(sup+inf)/2;
        if(T2[x]<T1[m])
          sup=m-1;
        else if(T2[x]>T1[m])
          inf=m+1;
        else {
          pos=m;
          T3[i] = T2[x];
          i++;
          tmpIndice=m+1;
        }
      }
    }
  }
  else {
    int inf, sup, pos, m, x;
    for (x=0; x <= n1-1; x++) {
      inf=tmpIndice, sup=n2-1, pos=-1;
      while((inf<=sup) && pos==-1) {
        m=(sup+inf)/2;
        if(T1[x]<T2[m])
          sup=m-1;
        else if(T1[x]>T2[m])
          inf=m+1;
        else {
          pos=m;
          T3[i] = T1[x];
          i++;
          tmpIndice=m+1;
        }

      }
    }
  }
  printf("l'intersertion de T1 et T2 est T3 = [");
  for(k=0; k<i; k++)
		printf(" %i ", T3[k]);
  printf("]\n");
}


/*Fonction Union*/
/*Calcul dans un tableau T3 la fonction mathématique union entre T1 et T2*/
void union_gr_04(int *T1, int s1, int n1, int *T2, int s2, int n2, int *T3, int s3, int n3)
{
    int k=0, i=0,j=0;
    int x=0;
    int estPasContenu=1;
    if(n1 >= n2) {
        for(j=0; j<=n1-1; j++)
        {
            T3[i] = T1[j];
            i++;
        }
        for(x=0; x<n2; x++)
        {
            estPasContenu=0;
            j=0;
            while(j<n1 && estPasContenu==0)
            {
                if (T2[x] == T1[j]) estPasContenu=1;
                j++;
            }
            if (estPasContenu == 0)
            {
                T3[i]= T2[x];
                i++;
            }

        }
    }
    else
    {
        for(j=0; j<=n2-1; j++)
        {
            T3[i] = T2[j];
            i++;
        }
        for(x=0; x<n1; x++)
        {
            estPasContenu=0;
            j=0;
            while(j<n2 && estPasContenu==0)
            {
                if (T1[x] == T2[j]) estPasContenu=1;
                j++;
            }
            if (estPasContenu == 0)
            {
                T3[i]= T1[x];
                i++;
            }

        }
    }

/* Tri du tableau T3*/
    int bmax=i;
	int v;
	while(bmax>=0)
	{
		for(v=0; v<=bmax; v++)
		{
			if(T3[v]>T3[v+1])
			{
				k=T3[v];
				T3[v]=T3[v+1];
				T3[v+1]=k;
			}
		}
		bmax=bmax-1;
	}
	printf("l'union de T1 et T2 est T3 = [");
    for(k=0; k<i; k++)
	{
		printf(" %i ", T3[k]);
	}
    printf("]\n");

}

int main(void)
{
	int*T2=(int*) malloc (N*sizeof(int));
    T2[0]=2; T2[1]=4; T2[2]=43; T2[3]=72; T2[4]=79; T2[5]=80; T2[6]=90;
	int*T1=(int*) malloc (N*sizeof(int));
	T1[0]=1; T1[1]=2; T1[2]=4; T1[3]=42; T1[4]=68;
	printf("T1 = ");
	afficher(T1,5);
	printf("T2 = ");
	afficher(T2,7);
    int*T3=(int*) malloc ((2*N)*sizeof(int));
	appartient_gr_04(2, T1, N, 5);
	inclus_gr_04(T1, N, 5, T2, N, 7);
    inter_gr_04(T1, N, 5, T2, N, 7, T3, 2* N, 0);
	union_gr_04(T1, N, 5, T2, N, 7, T3, 2* N, 0);
	printf("\n");
	return 0;
}
